import{_ as s,o as n,c as a,f as l}from"./app-tN7dId5R.js";const e="/assets/image-8-B9KgntTg.png",o={},p=l(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目"><span>题目</span></a></h2><p>实现 <code>RandomizedSet</code> 类：</p><ul><li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li><li><code>bool insert(int val)</code> 当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 相同的概率 被返回。</li></ul><p>你必须实现类的所有函数，并满足每个函数的 平均 时间复杂度为 <code>O(1)</code> 。</p><p><strong>示例：</strong></p><blockquote><p><strong>输入</strong> &gt; [&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;] &gt; [[], [1], [2], [2], [], [1], [2], []]</p><p><strong>输出</strong> &gt; [null, true, false, true, 2, true, false, 2]</p><p><strong>解释</strong><br> RandomizedSet randomizedSet = new RandomizedSet();<br> randomizedSet.insert(1); // 向集合中插入 1 。返回 true 表示 1 被成功地插入。<br> randomizedSet.remove(2); // 返回 false ，表示集合中不存在 2 。<br> randomizedSet.insert(2); // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。<br> randomizedSet.getRandom(); // getRandom 应随机返回 1 或 2 。<br> randomizedSet.remove(1); // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。<br> randomizedSet.insert(2); // 2 已在集合中，所以返回 false 。<br> randomizedSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>-2^31^ &lt;= val &lt;= 2^31^ - 1</code></li><li>最多调用 <code>insert</code>、<code>remove</code> 和 <code>getRandom</code> 函数 <code>2 * 105</code> 次</li><li>在调用 <code>getRandom</code> 方法时，数据结构中 <em>至少存在一个</em> 元素。</li></ul><h2 id="解法" tabindex="-1"><a class="header-anchor" href="#解法"><span>解法</span></a></h2><h3 id="_1-哈希表加可变数组" tabindex="-1"><a class="header-anchor" href="#_1-哈希表加可变数组"><span>1. 哈希表加可变数组</span></a></h3><h4 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h4><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>由于题目中涉及到集合中数组的查询，并且查询的时间复杂度需要为 <code>O(1)</code>, 此时可以选择采用哈希表，将查询的数字作为哈希表的 key。</li><li>由于还需要随机获取集合中的数，所有需要额外顶一个数组来保存集合中的数。（如果单纯用哈希表保存，再随机的时候需要循环才能获取到哈希表中的所有数，时间复杂度就不为 <code>O(1)</code> 了）</li><li>在删除数组中的元素时需要根据值查元素的 <code>index</code>, 所以哈希表的值应该为这个数在数组中对应的下标</li></ul></div><h4 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">  package</span><span style="color:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  import</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#98C379;">  	&quot;math/rand&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  type</span><span style="color:#E5C07B;"> RandomizedSet</span><span style="color:#C678DD;"> struct</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 保存数和这个数在数组中下标的map</span></span>
<span class="line"><span style="color:#E06C75;">  	idx</span><span style="color:#C678DD;"> map</span><span style="color:#ABB2BF;">[</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">int</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 包这些数的集合</span></span>
<span class="line"><span style="color:#E06C75;">  	val</span><span style="color:#ABB2BF;"> []</span><span style="color:#C678DD;">int</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 返回实列</span></span>
<span class="line"><span style="color:#C678DD;">  func</span><span style="color:#61AFEF;"> Constructor</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">RandomizedSet</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  	return</span><span style="color:#E5C07B;"> RandomizedSet</span><span style="color:#ABB2BF;">{</span><span style="color:#C678DD;">map</span><span style="color:#ABB2BF;">[</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">{}, []</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">{}}</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  func</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">this</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;">RandomizedSet</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 查询哈希表中是否存在这个数</span></span>
<span class="line"><span style="color:#C678DD;">  	if</span><span style="color:#E06C75;"> _</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ok</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">]; </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 不存在则向集合中添加这个数</span></span>
<span class="line"><span style="color:#E06C75;">  		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#E5C07B;"> =</span><span style="color:#61AFEF;"> append</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 并记录这个数对应集合的下标</span></span>
<span class="line"><span style="color:#E06C75;">  		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">] </span><span style="color:#E5C07B;">=</span><span style="color:#61AFEF;"> len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">  		return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">  	}</span></span>
<span class="line"><span style="color:#C678DD;">  	return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  func</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">this</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;">RandomizedSet</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 查询哈希表中是否存在这个数</span></span>
<span class="line"><span style="color:#C678DD;">  	if</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ok</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">]; </span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 若存在，则交换这个数和最后一个数（避免删除中间元素导致哈希表中记录的索引发生变化）</span></span>
<span class="line"><span style="color:#E06C75;">  		temp</span><span style="color:#E5C07B;"> :=</span><span style="color:#E06C75;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">  		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#E5C07B;">=</span><span style="color:#E06C75;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">  		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">] </span><span style="color:#E5C07B;">=</span><span style="color:#E06C75;"> temp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 并修改哈希表中对应索引</span></span>
<span class="line"><span style="color:#E06C75;">  		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">temp</span><span style="color:#ABB2BF;">] </span><span style="color:#E5C07B;">=</span><span style="color:#E06C75;"> index</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 删除集合中的数以及哈希表中的索引</span></span>
<span class="line"><span style="color:#E06C75;">  		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#E5C07B;"> =</span><span style="color:#E06C75;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">[:</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#61AFEF;">  		delete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  		return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">  	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  	return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  func</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">this</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;">RandomizedSet</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">GetRandom</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 随机获取一个下标，并返回对应下标的值</span></span>
<span class="line"><span style="color:#C678DD;">  	return</span><span style="color:#E06C75;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">rand</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Intn</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">))]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试用例" tabindex="-1"><a class="header-anchor" href="#测试用例"><span>测试用例</span></a></h4><figure><img src="`+e+'" alt="哈希表加可变数组测试用例" tabindex="0" loading="lazy"><figcaption>哈希表加可变数组测试用例</figcaption></figure><h4 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h4><ul><li><p>时间复杂度 <strong>O(1)</strong>：因为无论数组的大小如何，获取随机元素的操作都只需要常数时间，所以时间复杂度为<strong>O(1)</strong></p></li><li><p>空间复杂度 <strong>O(n)</strong>: 因为函数中使用的数据结构包括一个哈希表和一个数组，这两个数据结构的大小都与输入的数据的数量成正比。在最坏的情况下，所有的数据都需要被存储进哈希表和数组中，因此空间复杂度为 <strong>O(n)</strong>。</p></li></ul>',18),t=[p];function c(r,i){return n(),a("div",null,t)}const B=s(o,[["render",c],["__file","O(1) 时间插入、删除和获取随机元素.html.vue"]]),y=JSON.parse(`{"path":"/leetcode/O(1)%20%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0.html","title":"O(1) 时间插入、删除和获取随机元素","lang":"zh-CN","frontmatter":{"title":"O(1) 时间插入、删除和获取随机元素","description":"算法，数组，O(1) 时间插入、删除和获取随机元素，golang","date":"2024-04-29T00:00:00.000Z","star":true,"isOriginal":true,"category":["算法"],"tag":["算法"],"head":[["meta",{"property":"og:url","content":"https://blog.singlequote.cn/leetcode/O(1)%20%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0.html"}],["meta",{"property":"og:site_name","content":"SingleQuote's Blog"}],["meta",{"property":"og:title","content":"O(1) 时间插入、删除和获取随机元素"}],["meta",{"property":"og:description","content":"算法，数组，O(1) 时间插入、删除和获取随机元素，golang"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-29T07:58:51.000Z"}],["meta",{"property":"article:author","content":"SingleQuote"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-04-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-29T07:58:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"O(1) 时间插入、删除和获取随机元素\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-29T07:58:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SingleQuote\\",\\"url\\":\\"blog.SingleQuote.cn\\"}]}"]]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"解法","slug":"解法","link":"#解法","children":[{"level":3,"title":"1. 哈希表加可变数组","slug":"_1-哈希表加可变数组","link":"#_1-哈希表加可变数组","children":[]}]}],"git":{"createdTime":1714377531000,"updatedTime":1714377531000,"contributors":[{"name":"tmh","email":"t13219006372@163.com","commits":1}]},"readingTime":{"minutes":3.41,"words":1024},"filePathRelative":"leetcode/O(1) 时间插入、删除和获取随机元素.md","localizedDate":"2024年4月29日","excerpt":"<h2>题目</h2>\\n<p>实现 <code>RandomizedSet</code> 类：</p>\\n<ul>\\n<li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li>\\n<li><code>bool insert(int val)</code> 当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\\n<li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\\n<li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 相同的概率 被返回。</li>\\n</ul>"}`);export{B as comp,y as data};
