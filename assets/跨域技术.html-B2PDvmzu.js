import{_ as s,o as n,c as a,f as l}from"./app-tN7dId5R.js";const e="/assets/image-1-CInLrvzE.jpeg",o={},p=l(`<h2 id="什么是同源" tabindex="-1"><a class="header-anchor" href="#什么是同源"><span>什么是同源</span></a></h2><p>如果两个地址具有相同的 <strong>协议、域名、端口号</strong>，我们认为他们具有相同的源</p><h2 id="什么是浏览器同源策略" tabindex="-1"><a class="header-anchor" href="#什么是浏览器同源策略"><span>什么是浏览器同源策略</span></a></h2><p>同源策略是浏览器的一个安全限制，它阻止了 <strong>不同域</strong> 之间进行数据交互。</p><h3 id="同源策略阻止了哪些数据交互" tabindex="-1"><a class="header-anchor" href="#同源策略阻止了哪些数据交互"><span>同源策略阻止了哪些数据交互</span></a></h3><ol><li>服务读取非同源策略下的 <code>cookie</code>、<code>storage</code></li><li>无法解除非同源的 dom</li><li><strong>无法向非同源地址发送 ajax 请求</strong></li></ol><h2 id="什么是跨域" tabindex="-1"><a class="header-anchor" href="#什么是跨域"><span>什么是跨域</span></a></h2><p>违反同源策略，向不同源发送 ajax 请求的行为称之为跨域。<br> 在正常情况下，<strong>浏览器会阻止跨域行为并且抛出错误</strong>。</p><h2 id="解决跨域问题" tabindex="-1"><a class="header-anchor" href="#解决跨域问题"><span>解决跨域问题</span></a></h2><p>使用一定方案成功向非同源地址发送 ajax 请求</p><h3 id="jsonp-技术解决跨域" tabindex="-1"><a class="header-anchor" href="#jsonp-技术解决跨域"><span>jsonp 技术解决跨域</span></a></h3><p>jsonp 利用了 <code>&lt;script&gt;</code> 标签 <strong>不受同源策略限制</strong> 的特性实现跨域。</p><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h4><p>需要前后端共同配合完成：<br> 前端 -- 预先定义一个全局的 callback 函数，并将函数名通过 <code>script</code>标签发送给后端。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callback</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 成功获取数据</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建script标签发送请求</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> scriptEl</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;script&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">scriptEl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;http://localhost:10086/jsonp?callback=callback&#39;</span><span style="color:#7F848E;font-style:italic;"> // 将回调函数名发送给后端</span></span>
<span class="line"><span style="color:#E5C07B;">scriptEl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onload</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scriptEl</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scriptEl</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端 -- 拿到 callback 函数名，拼接一个函数调用，并将需要返回的数据以参数的形式传入。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> http</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">http</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> URL</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">\`http://</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">host</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> callback</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> url</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">searchParams</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;callback&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> url</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathname</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">path</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;/jsonp&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;get data success&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">] }</span></span>
<span class="line"><span style="color:#E5C07B;">      res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">callback</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">(</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">)\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10086</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cors-跨域" tabindex="-1"><a class="header-anchor" href="#cors-跨域"><span>cors 跨域</span></a></h3><h4 id="什么是-cors" tabindex="-1"><a class="header-anchor" href="#什么是-cors"><span>什么是 cors</span></a></h4><p>cors 跨域资源共享策略，是 w3c 的一个标准，运行 XMLHttpRuest 请求向 <strong>非同源</strong> 地址发起请求，完成跨域。</p><h4 id="浏览器对请求的处理" tabindex="-1"><a class="header-anchor" href="#浏览器对请求的处理"><span>浏览器对请求的处理</span></a></h4><p>浏览器将请求分为了<strong>简单请求和非简单请求</strong></p><ol><li>简单请求 -- 同时满足以下两个条件 <ol><li>请求方法是以下三种： <ol><li>HEAD</li><li>GET</li><li>POST</li></ol></li><li>HTTP 请求头信息不超出以下几种字段 <ol><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ol></li></ol></li><li>非简单请求 -- 不同时满足以上两种条件</li></ol><p>浏览器对两种请求的处理是不一样的</p><h5 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求"><span>简单请求</span></a></h5><p>为请求头添加 <strong>Origin</strong> 字段，若和响应头中 Access-Control-Allow-Origin 字段一致，则允许访问</p><h5 id="非简单请求" tabindex="-1"><a class="header-anchor" href="#非简单请求"><span>非简单请求</span></a></h5><p>在发送非简单请求之前会发送一个 <strong>预请求</strong>，请求方法为 <strong>OPTIONS</strong>。此请求会根据造成非简单请求的原因添加不同的请求头，和响应头对比，看是否允许访问，若不允许则报错</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;Access-Control-Request-Method&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;PUT&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 由于 请求方法 造成非简单请求则添加</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;Access-Control-Request-Headers&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;X-Access-token&quot;</span><span style="color:#7F848E;font-style:italic;"> // 由于请求头造成</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1"><span>实现</span></a></h4><p>需要后端设置允许跨域资源共享策略的源，方法，请求头，cookie 等</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> http</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">http</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 允许非简单请求的请求方法为 PUT</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Access-Control-Allow-Methods&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;PUT&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 允许请求的源为 http://localhost:8080</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;http://localhost:8080&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 允许请求时携带的非基本请求头为 aaa、bbb</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Access-Control-Allow-Headers&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;aaa,bbb&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在预请求成功之后多久不会再发送预请求</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Access-Control-Max-Age&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;1728000&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 允许浏览器携带cookie跨域</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Access-Control-Allow-Credentials&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;true&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;OK&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10086</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理服务器实现跨域" tabindex="-1"><a class="header-anchor" href="#代理服务器实现跨域"><span>代理服务器实现跨域</span></a></h3><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h4><p>只有浏览器向服务器之间发送请求才会有同源策略的限制，<strong>服务器向服务器之间发送请求是没有限制的</strong>。因此，只要向本地服务器发送请求，并由本地服务器转发到目标服务器，即可解决跨域问题。</p><figure><img src="`+e+`" alt="代理服务器实现跨域" tabindex="0" loading="lazy"><figcaption>代理服务器实现跨域</figcaption></figure><h4 id="实现-2" tabindex="-1"><a class="header-anchor" href="#实现-2"><span>实现</span></a></h4><p>以 webpack 的 webpack-dev-server 为例<br><strong>webpack.config.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">  devServer</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#E06C75;">    port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 服务器运行在本地的8080端口</span></span>
<span class="line"><span style="color:#E06C75;">    proxy</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 将本地请求中带 /api/ 的请求代理到 http://localhost:1123</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 示例：http://localhost:8080/api/test -&gt; http://localhost:1123/api/test</span></span>
<span class="line"><span style="color:#98C379;">      &#39;/api/&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;http://localhost:1123&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>index.html</strong></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> onclick</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;</span><span style="color:#61AFEF;">senRequest</span><span style="color:#98C379;">()&quot;</span><span style="color:#ABB2BF;">&gt;Click Me&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> sendRequest</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/api/test&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),t=[p];function c(r,i){return n(),a("div",null,t)}const y=s(o,[["render",c],["__file","跨域技术.html.vue"]]),d=JSON.parse(`{"path":"/frontend/others/%E8%B7%A8%E5%9F%9F%E6%8A%80%E6%9C%AF.html","title":"跨域技术","lang":"zh-CN","frontmatter":{"title":"跨域技术","description":"跨域技术, 浏览器跨域机制,同源策略,cors,jsonp","date":"2024-04-29T00:00:00.000Z","icon":"cors","cover":"https://w.wallhaven.cc/full/ex/wallhaven-ex11z8.jpg","star":true,"isOriginal":true,"category":["浏览器"],"tag":["跨域"],"order":2,"head":[["meta",{"property":"og:url","content":"https://blog.singlequote.cn/frontend/others/%E8%B7%A8%E5%9F%9F%E6%8A%80%E6%9C%AF.html"}],["meta",{"property":"og:site_name","content":"SingleQuote's Blog"}],["meta",{"property":"og:title","content":"跨域技术"}],["meta",{"property":"og:description","content":"跨域技术, 浏览器跨域机制,同源策略,cors,jsonp"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://w.wallhaven.cc/full/ex/wallhaven-ex11z8.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-29T09:46:27.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"跨域技术"}],["meta",{"property":"article:author","content":"SingleQuote"}],["meta",{"property":"article:tag","content":"跨域"}],["meta",{"property":"article:published_time","content":"2024-04-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-29T09:46:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跨域技术\\",\\"image\\":[\\"https://w.wallhaven.cc/full/ex/wallhaven-ex11z8.jpg\\"],\\"datePublished\\":\\"2024-04-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-29T09:46:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SingleQuote\\",\\"url\\":\\"blog.SingleQuote.cn\\"}]}"]]},"headers":[{"level":2,"title":"什么是同源","slug":"什么是同源","link":"#什么是同源","children":[]},{"level":2,"title":"什么是浏览器同源策略","slug":"什么是浏览器同源策略","link":"#什么是浏览器同源策略","children":[{"level":3,"title":"同源策略阻止了哪些数据交互","slug":"同源策略阻止了哪些数据交互","link":"#同源策略阻止了哪些数据交互","children":[]}]},{"level":2,"title":"什么是跨域","slug":"什么是跨域","link":"#什么是跨域","children":[]},{"level":2,"title":"解决跨域问题","slug":"解决跨域问题","link":"#解决跨域问题","children":[{"level":3,"title":"jsonp 技术解决跨域","slug":"jsonp-技术解决跨域","link":"#jsonp-技术解决跨域","children":[]},{"level":3,"title":"cors 跨域","slug":"cors-跨域","link":"#cors-跨域","children":[]},{"level":3,"title":"代理服务器实现跨域","slug":"代理服务器实现跨域","link":"#代理服务器实现跨域","children":[]}]}],"git":{"createdTime":1714383987000,"updatedTime":1714383987000,"contributors":[{"name":"tmh","email":"t13219006372@163.com","commits":1}]},"readingTime":{"minutes":3.7,"words":1111},"filePathRelative":"frontend/others/跨域技术.md","localizedDate":"2024年4月29日","excerpt":"<h2>什么是同源</h2>\\n<p>如果两个地址具有相同的 <strong>协议、域名、端口号</strong>，我们认为他们具有相同的源</p>\\n<h2>什么是浏览器同源策略</h2>\\n<p>同源策略是浏览器的一个安全限制，它阻止了 <strong>不同域</strong> 之间进行数据交互。</p>\\n<h3>同源策略阻止了哪些数据交互</h3>\\n<ol>\\n<li>服务读取非同源策略下的 <code>cookie</code>、<code>storage</code></li>\\n<li>无法解除非同源的 dom</li>\\n<li><strong>无法向非同源地址发送 ajax 请求</strong></li>\\n</ol>"}`);export{y as comp,d as data};
