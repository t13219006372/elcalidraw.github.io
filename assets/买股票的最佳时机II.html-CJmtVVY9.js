import{_ as s,o as n,c as a,f as l}from"./app-tN7dId5R.js";const e="/assets/image-Dw5Pb9hm.png",p="/assets/image-1-KqTmZs-B.png",o={},t=l(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目"><span>题目</span></a></h2><p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。<br> 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。<br> 返回 你能获得的 <strong>最大</strong> 利润 。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：prices = [7,1,5,3,6,4]<br> 输出：7<br> 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。<br> 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。<br> 总利润为 4 + 3 = 7 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：prices = [1,2,3,4,5]<br> 输出：4<br> 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。<br> 总利润为 4 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：prices = [7,6,4,3,1]<br> 输出：0<br> 解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 10^4^</code></li><li><code>0 &lt;= prices[i] &lt;= 10^4^</code></li></ul><h2 id="解法" tabindex="-1"><a class="header-anchor" href="#解法"><span>解法</span></a></h2><h3 id="_1-暴力枚举" tabindex="-1"><a class="header-anchor" href="#_1-暴力枚举"><span>1. 暴力枚举</span></a></h3><h4 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h4><p>假设手上有股票，则可以卖出股票或不操作。假设手上有股票，可以选择买入或不操作。穷举出所有操作，并记录最后的利润。</p><h4 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">  import</span><span style="color:#98C379;"> &quot;math&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 利润</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> res</span><span style="color:#E5C07B;">  =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  func</span><span style="color:#61AFEF;"> maxProfit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;"> []</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    n</span><span style="color:#E5C07B;"> :=</span><span style="color:#61AFEF;"> len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 小于两天则最大利润为0</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    res</span><span style="color:#E5C07B;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#61AFEF;">    indeterminate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> res</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * @param prices 股票票价</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * @param index 当前是哪天</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * @param n 总共有多少天</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * @param hasStock 手上时候持有股票</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * @param profit 当前利润</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  func</span><span style="color:#61AFEF;"> indeterminate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;"> []</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">n</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hasStock</span><span style="color:#C678DD;"> bool</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">profit</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 最后一天之后比较出最大的利润</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        res</span><span style="color:#E5C07B;"> =</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Max</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">float64</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">float64</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">profit</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#C678DD;">        return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 不操作</span></span>
<span class="line"><span style="color:#61AFEF;">    indeterminate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#C678DD;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hasStock</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">profit</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> hasStock</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 尝试卖出</span></span>
<span class="line"><span style="color:#61AFEF;">      indeterminate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#C678DD;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">profit</span><span style="color:#C678DD;">+</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 尝试买入</span></span>
<span class="line"><span style="color:#61AFEF;">      indeterminate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#C678DD;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">profit</span><span style="color:#C678DD;">-</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试用例" tabindex="-1"><a class="header-anchor" href="#测试用例"><span>测试用例</span></a></h4><figure><img src="`+e+`" alt="暴力枚举测试用例" tabindex="0" loading="lazy"><figcaption>暴力枚举测试用例</figcaption></figure><h4 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h4><ul><li><p>时间复杂度 <strong>O(2<sup>n</sup>)</strong>：由于在此函数中无论是否操作，递归都会继续深入到下一天，所以不操作并不会增加时间复杂度。因此，我们只考虑买入和卖出这两种操作的时间复杂度。它尝试了数组中每个元素的两种可能性（买入和卖出）时间复杂度为 <strong>O(2<sup>n</sup>)</strong></p></li><li><p>空间复杂度 <strong>O(n)</strong>: 其中 n 是数组的长度。这是由于递归的深度为 n，每一层递归需要 O(1)的空间，因此总的空间复杂度为 <strong>O(n)</strong>。</p></li></ul><h3 id="_2-贪心算法" tabindex="-1"><a class="header-anchor" href="#_2-贪心算法"><span>2.贪心算法</span></a></h3><h4 id="解题思路-1" tabindex="-1"><a class="header-anchor" href="#解题思路-1"><span>解题思路</span></a></h4><p>由于当天可以进行卖出和买入，当今天比昨天票价更高，则卖出。此时的利润将会是最高的</p><h4 id="代码示例-1" tabindex="-1"><a class="header-anchor" href="#代码示例-1"><span>代码示例</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">  func</span><span style="color:#61AFEF;"> maxProfit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;"> []</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    profit</span><span style="color:#E5C07B;"> :=</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#E06C75;">    n</span><span style="color:#E5C07B;"> :=</span><span style="color:#61AFEF;"> len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> i</span><span style="color:#E5C07B;">:=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prices</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> prices</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]){</span></span>
<span class="line"><span style="color:#E06C75;">            profit</span><span style="color:#E5C07B;"> +=</span><span style="color:#E06C75;"> prices</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">-</span><span style="color:#E06C75;"> prices</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> profit</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试用例-1" tabindex="-1"><a class="header-anchor" href="#测试用例-1"><span>测试用例</span></a></h4><figure><img src="`+p+'" alt="贪心算法测试用例" tabindex="0" loading="lazy"><figcaption>贪心算法测试用例</figcaption></figure><h4 id="分析-1" tabindex="-1"><a class="header-anchor" href="#分析-1"><span>分析</span></a></h4><ul><li>时间复杂度 <strong>O(n)</strong>: 其中 n 是数组的长度。这是由于函数需要遍历数组中的每个元素。</li><li>空间复杂度 <strong>O(1)</strong>：因为该函数只使用了常量级别的额外空间。</li></ul>',29),r=[t];function c(i,B){return n(),a("div",null,r)}const d=s(o,[["render",c],["__file","买股票的最佳时机II.html.vue"]]),m=JSON.parse(`{"path":"/leetcode/%E4%B9%B0%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.html","title":"买股票的最佳时机II","lang":"zh-CN","frontmatter":{"title":"买股票的最佳时机II","description":"算法，数组，买股票的最佳时机II，golang","date":"2024-04-10T00:00:00.000Z","star":true,"isOriginal":true,"category":["算法"],"tag":["算法"],"head":[["meta",{"property":"og:url","content":"https://blog.singlequote.cn/leetcode/%E4%B9%B0%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.html"}],["meta",{"property":"og:site_name","content":"SingleQuote's Blog"}],["meta",{"property":"og:title","content":"买股票的最佳时机II"}],["meta",{"property":"og:description","content":"算法，数组，买股票的最佳时机II，golang"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-11T16:00:16.000Z"}],["meta",{"property":"article:author","content":"SingleQuote"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-04-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-11T16:00:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"买股票的最佳时机II\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-11T16:00:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SingleQuote\\",\\"url\\":\\"blog.SingleQuote.cn\\"}]}"]]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"解法","slug":"解法","link":"#解法","children":[{"level":3,"title":"1. 暴力枚举","slug":"_1-暴力枚举","link":"#_1-暴力枚举","children":[]},{"level":3,"title":"2.贪心算法","slug":"_2-贪心算法","link":"#_2-贪心算法","children":[]}]}],"git":{"createdTime":1712770124000,"updatedTime":1712851216000,"contributors":[{"name":"tmh","email":"t13219006372@163.com","commits":3}]},"readingTime":{"minutes":3.05,"words":916},"filePathRelative":"leetcode/买股票的最佳时机II.md","localizedDate":"2024年4月10日","excerpt":"<h2>题目</h2>\\n<p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。<br>\\n在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。<br>\\n返回 你能获得的 <strong>最大</strong> 利润 。</p>\\n<p><strong>示例 1：</strong></p>\\n<blockquote>\\n<p>输入：prices = [7,1,5,3,6,4]<br>\\n输出：7<br>\\n解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。<br>\\n随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。<br>\\n总利润为 4 + 3 = 7 。</p>\\n</blockquote>"}`);export{d as comp,m as data};
