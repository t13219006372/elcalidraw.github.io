import{_ as s,o as n,c as a,f as l}from"./app-tN7dId5R.js";const e="/assets/image-2-DdfpHDxO.png",p="/assets/image-3-rHS4_AiM.png",o={},t=l(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目"><span>题目</span></a></h2><p>给你一个非负整数数组 nums ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置<strong>可以跳跃的最大长度</strong>。</p><p>判断你是否<strong>能够到达最后一个下标</strong>，如果可以，返回 true ；否则，返回 false 。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：nums = [2,3,1,1,4]<br> 输出：true<br> 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：nums = [3,2,1,0,4]<br> 输出：false<br> 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4^</code></li><li><code>0 &lt;= nums[i] &lt;= 10^5^</code></li></ul><h2 id="解法" tabindex="-1"><a class="header-anchor" href="#解法"><span>解法</span></a></h2><h3 id="_1-暴力枚举" tabindex="-1"><a class="header-anchor" href="#_1-暴力枚举"><span>1. 暴力枚举</span></a></h3><h4 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以将问题拆分，分别判断是否有位置可以到达当前位置，如果有位置能到达当前并且这个能到达当前位置的位置为 index 0，则代表可以从第一个位置跳到当前位置</p><p>例如:<br> nums = [2,3,1,1,4]<br> 要判断能否到达最后一位(index == 4),则需要判断 [2,3,1,1] 中是否有元素能跳到 4（index == 4）；<br> 我们发现 2（index == 0）无法跳到 4（index == 4）； 3（index ==1） 可以跳到 4（index == 4）；</p><p>那么我们下一步就需要判断 [2] 中是否有元素能跳到 3（index == 1）；<br> 此时 2（index == 0）能跳到 3（index == 1）；并且此时 判断的这个位置为 index == 0；则表示可以从最开始的位置跳到最后位置；</p></div><h4 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * 判断是否有位置能跳到指定位置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * @param nums 待判断的位置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * @param target 指定位置的index</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * @return { 是否能跳到指定位置，能跳到指定位置的这个位置的indx }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  func</span><span style="color:#61AFEF;"> canGo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;"> []</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">target</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">) (</span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	  for</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">num</span><span style="color:#E5C07B;"> :=</span><span style="color:#C678DD;"> range</span><span style="color:#E06C75;"> nums</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		  if</span><span style="color:#E06C75;"> i</span><span style="color:#C678DD;">+</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			  return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span></span>
<span class="line"><span style="color:#ABB2BF;">		  }</span></span>
<span class="line"><span style="color:#ABB2BF;">	  }</span></span>
<span class="line"><span style="color:#C678DD;">	  return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  func</span><span style="color:#61AFEF;"> canJump</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;"> []</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  	index</span><span style="color:#E5C07B;"> :=</span><span style="color:#61AFEF;"> len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果只有一个元素，则一定能到最后一个位置</span></span>
<span class="line"><span style="color:#C678DD;">  	if</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  		return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">  	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  	for</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 判断是否最后一个位置之前是否有位置能跳跃到最后一个位置</span></span>
<span class="line"><span style="color:#E06C75;">  		ok</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">idx</span><span style="color:#E5C07B;"> :=</span><span style="color:#61AFEF;"> canGo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">[:</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  		if</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  			return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">  		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 如果有并且位置为0 则代表可以从第一个位置跳到最后一个位置</span></span>
<span class="line"><span style="color:#C678DD;">  		if</span><span style="color:#E06C75;"> ok</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> idx</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  			return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">  		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 如果位置不为0，进入下一轮循环；判断这个位置之前是否有位置可以跳到这个位置</span></span>
<span class="line"><span style="color:#E06C75;">  		index</span><span style="color:#E5C07B;"> =</span><span style="color:#E06C75;"> idx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  	}</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试用例" tabindex="-1"><a class="header-anchor" href="#测试用例"><span>测试用例</span></a></h4><figure><img src="`+e+`" alt="暴力枚举测试用例" tabindex="0" loading="lazy"><figcaption>暴力枚举测试用例</figcaption></figure><h4 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h4><ul><li><p>时间复杂度 <strong>O(n<sup>2</sup>)</strong>：&quot;canJump&quot;函数中主要有一个外层循环和一个内层的&quot;canGo&quot;函数。外层循环的次数最多为数组 nums 的长度，也就是 n。而对于每一次外层循环，&quot;canGo&quot;函数都要遍历一次数组，因此&quot;canGo&quot;函数的时间复杂度也是 O(n)。因此，总的时间复杂度就是 O(n<sup>2</sup>)。</p></li><li><p>空间复杂度 <strong>O(1)</strong>: 因为所有的变量都是常数级别的，因为空间复杂度为 <strong>O(1)</strong>。</p></li></ul><h3 id="_2-贪心算法" tabindex="-1"><a class="header-anchor" href="#_2-贪心算法"><span>2.贪心算法</span></a></h3><h4 id="解题思路-1" tabindex="-1"><a class="header-anchor" href="#解题思路-1"><span>解题思路</span></a></h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当前位置的数（nums[index]）加上当前位置的索引（index）表示我们可以跳到的最远的位置。我们可以定义一个变量（k）表示当前可以跳到的最远的位置，循环数组，不断的去维护这个最远位置；<br> 如果当前位置（index）大于这个最远的位置，则代表这个位置之前的所有位置都不能跳到当前位置，则返回 false。<br> 如果最远位置(k)大于最后一位（len(nums)）表示可以从最开始位置跳到最后位置。</p></div><h4 id="代码示例-1" tabindex="-1"><a class="header-anchor" href="#代码示例-1"><span>代码示例</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">  func</span><span style="color:#61AFEF;"> canJump</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;"> []</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">bool</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	  k</span><span style="color:#E5C07B;"> :=</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#E06C75;">	  n</span><span style="color:#E5C07B;"> :=</span><span style="color:#61AFEF;"> len</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nums</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	  for</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">num</span><span style="color:#E5C07B;"> :=</span><span style="color:#C678DD;"> range</span><span style="color:#E06C75;"> nums</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	  	if</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> k</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	  		return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">	  	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	  	if</span><span style="color:#E06C75;"> index</span><span style="color:#C678DD;">+</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E06C75;"> n</span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	  		return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">	  	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">	  	k</span><span style="color:#E5C07B;"> =</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Max</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">float64</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">float64</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#C678DD;">+</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#ABB2BF;">	  }</span></span>
<span class="line"><span style="color:#C678DD;">	  return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试用例-1" tabindex="-1"><a class="header-anchor" href="#测试用例-1"><span>测试用例</span></a></h4><figure><img src="`+p+'" alt="贪心算法测试用例" tabindex="0" loading="lazy"><figcaption>贪心算法测试用例</figcaption></figure><h4 id="分析-1" tabindex="-1"><a class="header-anchor" href="#分析-1"><span>分析</span></a></h4><ul><li>时间复杂度 <strong>O(n)</strong>: 因为只遍历了一遍数组，所以时间复杂度为 <strong>O(n)</strong></li><li>空间复杂度 <strong>O(1)</strong>：因为该函数只使用了常量级别的额外空间, 所以空间复杂度为 <strong>O(1)</strong>。</li></ul>',28),i=[t];function r(c,d){return n(),a("div",null,i)}const B=s(o,[["render",r],["__file","跳跃游戏.html.vue"]]),u=JSON.parse(`{"path":"/leetcode/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html","title":"跳跃游戏","lang":"zh-CN","frontmatter":{"title":"跳跃游戏","description":"算法，数组，跳跃游戏，golang","date":"2024-04-11T00:00:00.000Z","star":true,"isOriginal":true,"category":["算法"],"tag":["算法"],"head":[["meta",{"property":"og:url","content":"https://blog.singlequote.cn/leetcode/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html"}],["meta",{"property":"og:site_name","content":"SingleQuote's Blog"}],["meta",{"property":"og:title","content":"跳跃游戏"}],["meta",{"property":"og:description","content":"算法，数组，跳跃游戏，golang"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T19:56:06.000Z"}],["meta",{"property":"article:author","content":"SingleQuote"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-04-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T19:56:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跳跃游戏\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-12T19:56:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SingleQuote\\",\\"url\\":\\"blog.SingleQuote.cn\\"}]}"]]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"解法","slug":"解法","link":"#解法","children":[{"level":3,"title":"1. 暴力枚举","slug":"_1-暴力枚举","link":"#_1-暴力枚举","children":[]},{"level":3,"title":"2.贪心算法","slug":"_2-贪心算法","link":"#_2-贪心算法","children":[]}]}],"git":{"createdTime":1712851216000,"updatedTime":1712951766000,"contributors":[{"name":"tmh","email":"t13219006372@163.com","commits":2}]},"readingTime":{"minutes":3.65,"words":1095},"filePathRelative":"leetcode/跳跃游戏.md","localizedDate":"2024年4月11日","excerpt":"<h2>题目</h2>\\n<p>给你一个非负整数数组 nums ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置<strong>可以跳跃的最大长度</strong>。</p>\\n<p>判断你是否<strong>能够到达最后一个下标</strong>，如果可以，返回 true ；否则，返回 false 。</p>\\n<p><strong>示例 1：</strong></p>\\n<blockquote>\\n<p>输入：nums = [2,3,1,1,4]<br>\\n输出：true<br>\\n解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</p>\\n</blockquote>"}`);export{B as comp,u as data};
